목표: **완전 무료** + **Next.js + Vercel + Hugging Face Free**로 “노션 자동 템플릿 생성기” MVP를 오늘 바로 띄우기.

---

# 0) 준비물 (필수 계정)

* GitHub 계정
* Vercel 계정 (GitHub 연동)
* Hugging Face 계정 (Free Inference API 토큰 1개)

---

# 1) 새 프로젝트 생성 (Cursor)

**Cursor → “New Project” → “Create from Template” → “Next.js (TypeScript)” 선택**

또는 터미널로:

```bash
npx create-next-app@latest notionify --typescript --eslint
cd notionify
```

**커밋**

```
chore: bootstrap Next.js (TS) project
```

---

# 2) 디렉터리 구성 추가

Cursor 왼쪽 탐색기에서 아래 파일/폴더를 생성:

```
notionify/
├─ app/
│  ├─ page.tsx
│  └─ api/
│     └─ generate/route.ts
├─ lib/
│  └─ prompt.ts
├─ public/
│  └─ favicon.ico (기본 그대로)
├─ .env.local          # 로컬 전용 (자동으로 gitignore 됨)
└─ package.json        # 생성되어 있음
```

---

# 3) 프롬프트 템플릿 작성

**파일:** `lib/prompt.ts`

```ts
export const SYSTEM_PROMPT = `
You are a Notion template architect.
Return concise, practical Notion page templates.

Output STRICTLY in pure JSON with keys:
"title": string,
"sections": array of { "name": string, "description": string },
"properties": array of { "name": string, "type": string, "description": string },
"notes": string (optional)
No extra text. No markdown. JSON only.
`;

export function userPrompt(purpose: string) {
  return `Purpose: "${purpose}"`;
}
```

**커밋**

```
feat: add prompt templates for JSON-only Notion output
```

---

# 4) 서버리스 API (HF 무료 호출)

**파일:** `app/api/generate/route.ts`

```ts
import { NextResponse } from "next/server";
import { SYSTEM_PROMPT, userPrompt } from "@/lib/prompt";

export const runtime = "edge"; // Vercel 무료 에지 런타임

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json();
    if (!prompt || typeof prompt !== "string") {
      return NextResponse.json({ ok: false, error: "Empty prompt" }, { status: 400 });
    }

    const HF_API_KEY = process.env.HF_API_KEY;
    if (!HF_API_KEY) {
      return NextResponse.json({ ok: false, error: "Missing HF_API_KEY" }, { status: 500 });
    }

    // 무료 모델 예시 (변경 가능)
    const model = "mistralai/Mistral-7B-Instruct-v0.2";

    const body = {
      inputs: `${SYSTEM_PROMPT}\n\n${userPrompt(prompt)}`,
      options: { wait_for_model: true }
    };

    const r = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${HF_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });

    const data = await r.json();

    // Hugging Face 응답 케이스 처리
    const text =
      Array.isArray(data) && data[0]?.generated_text
        ? data[0].generated_text
        : typeof data === "string"
        ? data
        : JSON.stringify(data);

    // JSON만 추출 (마지막 { ... } 블록 기준)
    const match = text.match(/\{[\s\S]*\}$/);
    const json = match ? JSON.parse(match[0]) : { raw: text };

    return NextResponse.json({ ok: true, template: json });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e?.message ?? "Server error" }, { status: 500 });
  }
}
```

**커밋**

```
feat: add Edge API route to call Hugging Face free inference with JSON-only output
```

---

# 5) 클라이언트 페이지 (입력/생성/복사/후원버튼)

**파일:** `app/page.tsx`

```tsx
"use client";
import { useState } from "react";

export default function Home() {
  const [prompt, setPrompt] = useState("");
  const [result, setResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function generate() {
    setLoading(true);
    setError(null);
    setResult(null);
    try {
      const r = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt })
      });
      const data = await r.json();
      if (!data.ok) throw new Error(data.error || "Failed");
      setResult(data.template);
    } catch (e: any) {
      setError(e.message);
    } finally {
      setLoading(false);
    }
  }

  async function copy() {
    const text = result ? JSON.stringify(result, null, 2) : "";
    await navigator.clipboard.writeText(text);
    alert("복사 완료! 노션에 붙여넣어 사용하세요.");
  }

  return (
    <main style={{ maxWidth: 760, margin: "40px auto", padding: 16 }}>
      <h1>Notionify — 노션 자동 템플릿 생성기 (무료)</h1>
      <p>원하는 용도를 적으면, 노션 템플릿 구조(JSON)로 만들어 드립니다.</p>

      <input
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder='예) "사이드프로젝트 관리 보드"'
        style={{ width: "100%", padding: 12, marginTop: 12, fontSize: 16 }}
      />

      <button
        onClick={generate}
        disabled={loading || !prompt.trim()}
        style={{ padding: "10px 14px", marginTop: 12 }}
      >
        {loading ? "생성 중..." : "생성하기"}
      </button>

      {error && <p style={{ color: "red" }}>{error}</p>}

      {result && (
        <>
          <h3 style={{ marginTop: 24 }}>결과(JSON)</h3>
          <pre
            style={{
              whiteSpace: "pre-wrap",
              background: "#f6f6f6",
              padding: 12,
              borderRadius: 8,
              fontSize: 14,
              lineHeight: 1.5
            }}
          >
            {JSON.stringify(result, null, 2)}
          </pre>
          <button onClick={copy} style={{ padding: "8px 12px" }}>
            복사하기
          </button>
        </>
      )}

      <hr style={{ margin: "24px 0" }} />
      <a
        href="https://www.buymeacoffee.com/YOUR_ID"
        target="_blank"
        rel="noreferrer"
        aria-label="Buy me a coffee"
      >
        <img
          src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"
          width="170"
          alt="Buy Me A Coffee"
        />
      </a>
    </main>
  );
}
```

**커밋**

```
feat: add minimal client UI with prompt input, result view, copy, and donation button
```

---

# 6) 환경변수(Hugging Face 토큰) 설정

**파일:** `.env.local`

```
HF_API_KEY=hf_XXXXXXXXXXXXXXXXXXXXXXXX
```

> Hugging Face → Settings → Access Tokens → New token (Write 권한 불필요, 기본 Read로 충분)

**로컬 테스트**

```bash
npm run dev
# http://localhost:3000 접속 → 프롬프트 입력 후 결과 확인
```

**커밋**

```
docs: add env variable instructions and run local dev
```

---

# 7) GitHub 푸시

```bash
git init
git add -A
git commit -m "init: Notionify MVP with HF free inference"
git branch -M main
git remote add origin https://github.com/<YOUR_ID>/notionify.git
git push -u origin main
```

---

# 8) Vercel 무료 배포

1. Vercel 대시보드 → **Add New** → **Project** → GitHub `notionify` 선택
2. **Environment Variables**에 `HF_API_KEY` 추가
3. **Deploy** 클릭 → 무료 도메인 자동 발급

배포 후 테스트:

* 배포 URL 접속 → 프롬프트 예: `독서 기록 템플릿`
* 결과(JSON) 복사 → 노션에 붙여넣고 필드/섹션 참고해서 페이지 구성

---

# 9) (선택) Gist 저장으로 “공유 링크” 만들기 (무료 DB 대체)

원하면 결과 JSON을 공개 Gist로 저장하는 API를 추가해 공유 URL을 만들 수 있어.

**파일:** `app/api/save/route.ts`

```ts
import { NextResponse } from "next/server";

export const runtime = "edge";

export async function POST(req: Request) {
  try {
    const { content } = await req.json();
    if (!content) return NextResponse.json({ ok: false, error: "No content" }, { status: 400 });

    const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
    if (!GITHUB_TOKEN) return NextResponse.json({ ok: false, error: "Missing GITHUB_TOKEN" }, { status: 500 });

    const filename = `notion-template-${Date.now()}.json`;
    const r = await fetch("https://api.github.com/gists", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        description: "Notionify template",
        public: true,
        files: { [filename]: { content: typeof content === "string" ? content : JSON.stringify(content, null, 2) } }
      })
    });

    const data = await r.json();
    return NextResponse.json({ ok: true, url: data?.html_url });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e?.message ?? "Server error" }, { status: 500 });
  }
}
```

* Vercel에 `GITHUB_TOKEN`(gist 범위) 환경변수 추가
* 클라이언트에서 `fetch("/api/save", { ... })` 호출 버튼만 달면 됨

**커밋**

```
feat: optional Gist save API to create shareable template links for free
```

---

# 10) 무료 홍보 & 수익화 체크리스트

* 랜딩 문구: “**Free AI Notion Template Generator** — JSON 구조 바로 복사”
* 하단에 **BuyMeACoffee/Ko-fi** 버튼 배치 (지금 포함됨)
* 커뮤니티 글:

  * Reddit: r/Notion, r/SideProject, r/Productivity
  * X(트위터): 데모 GIF + URL
  * Product Hunt: Weekend Launch (무료)
* 추후 **템플릿 30개 PDF** 만들어 Gumroad/Payhip에 무료/저가 등록 → 레터 구독 유도

---

# 11) 운영 팁 (완전 무료 유지)

* HF Free는 트래픽이 늘면 느려질 수 있음 → 모델 바꾸거나 출력 최소화(간결 JSON)로 토큰 절약
* 에러가 날 땐 **JSON-only**가 안 지켜졌을 가능성 → 정규식 매칭/파서 유지
* Edge Runtime(무료)로 빠른 응답 유지, 서버 비용 0원

---

## 끝.

위 순서 그대로 **파일 생성 → 코드 붙여넣기 → 커밋/푸시 → Vercel 배포**하면 바로 동작한다.
